// Generated by gencpp from file rflysim_sensor_rospkg/Obj.msg
// DO NOT EDIT!


#ifndef RFLYSIM_SENSOR_ROSPKG_MESSAGE_OBJ_H
#define RFLYSIM_SENSOR_ROSPKG_MESSAGE_OBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace rflysim_sensor_rospkg
{
template <class ContainerAllocator>
struct Obj_
{
  typedef Obj_<ContainerAllocator> Type;

  Obj_()
    : id(0)
    , type(0)
    , position()
    , angule()
    , size()  {
    }
  Obj_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , position(_alloc)
    , angule(_alloc)
    , size(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef uint64_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _angule_type;
  _angule_type angule;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> const> ConstPtr;

}; // struct Obj_

typedef ::rflysim_sensor_rospkg::Obj_<std::allocator<void> > Obj;

typedef boost::shared_ptr< ::rflysim_sensor_rospkg::Obj > ObjPtr;
typedef boost::shared_ptr< ::rflysim_sensor_rospkg::Obj const> ObjConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator1> & lhs, const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.position == rhs.position &&
    lhs.angule == rhs.angule &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator1> & lhs, const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rflysim_sensor_rospkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26fd945d0b2f8b91aae1901d73ca412d";
  }

  static const char* value(const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26fd945d0b2f8b91ULL;
  static const uint64_t static_value2 = 0xaae1901d73ca412dULL;
};

template<class ContainerAllocator>
struct DataType< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rflysim_sensor_rospkg/Obj";
  }

  static const char* value(const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 id\n"
"uint64 type\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Point angule\n"
"geometry_msgs/Point size\n"
"# Point  Obj_pos\n"
"# Point  Obj_angule\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.position);
      stream.next(m.angule);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rflysim_sensor_rospkg::Obj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rflysim_sensor_rospkg::Obj_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.type);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "angule: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.angule);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFLYSIM_SENSOR_ROSPKG_MESSAGE_OBJ_H
